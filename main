OPC.slider('seed', Math.floor(Math.random()*1000), 0, 1000, 1);
OPC.slider('flower_alpha', 10 + Math.floor(Math.random()*90), 10, 100, 1);
OPC.slider('flower_rugosity', Math.floor(Math.random()*100), 0, 100, 1);
OPC.slider('flower_hue', Math.floor(Math.random()*360), 0, 360, 1);
OPC.slider('flower_hue_variation', -75+Math.floor(Math.random()*150), -75, 75, 1);
/** OPC END**/

var heightFactor;
var bg;

function setup() {
	createCanvas(windowWidth, windowHeight);
	colorMode(HSB, 360, 100, 100, 100);
	heightFactor = height/545;
	bg = createBackground();
}

function  windowResized() {
	resizeCanvas(windowWidth, windowHeight);
	heightFactor = height/545;
	bg = createBackground();
}

function draw() {	
	randomSeed(seed);
	noiseSeed(random(Number.MAX_SAFE_INTEGER));
	
	const GREEN = color(120, 50, 20);
	
	//background("WhiteSmoke");
	image(bg, 0, 0);
	
	let pos = {x: width/2, y: height/2};
	stemData = generateStemData(4 /*nPoints*/);
	
	petals(pos, stemData.angle, 5 /*nPetals*/, 200*heightFactor /*r0*/);

	stroke(GREEN);
	strokeWeight(0.5*heightFactor);
	fill(GREEN);
	
	stem(pos, stemData.dx, stemData.dy);
	sepal(pos, stemData.angle);
}

function createBackground() {
	const COLOR = {HUE: 30, SATURATION: 2, BRIGHTNESS: {MIN: 80, MAX: 100}};
	const DIAMETER = {MIN: height, MAX: 3*height, STEP: 20*heightFactor};
	
  let bg = createGraphics(width, height);
	bg.colorMode(HSB, 360, 100, 100, 100);
  bg.noStroke();
for (let diam = DIAMETER.MAX; diam > DIAMETER.MIN; diam -= DIAMETER.STEP) {
		let brightness = map(diam, DIAMETER.MIN, DIAMETER.MAX, COLOR.BRIGHTNESS.MAX, COLOR.BRIGHTNESS.MIN);
    bg.fill(COLOR.HUE, COLOR.SATURATION, brightness);
    bg.circle(width/2, height/2, diam);

  }
	return bg;
}

function generateStemData(nPoints) {
	const S = 10*heightFactor;
	const LINE = {A:S, B: 2*S};
	let dx = [];
	for (let i = 0; i < nPoints; i++) {
		let variation = LINE.A*i + LINE.B;
		dx[i] = random(-variation,variation);
	}
	let dy = 5*S;
	
	let angle = -atan2(dx[0], dy);
	return {dx: dx, dy: dy, angle: angle};
}

function sepal(position, angle) {
	const S = 10*heightFactor;
	const VARIATION = {UPPER: random(2*S), LOWER: random(-S, S)};
	
	push();
	translate(position.x, position.y);
	rotate(angle);
	
	beginShape();
	vertex(0, 0);
	bezierVertex(2*S+VARIATION.UPPER, 0, S, 2*S, 3*S+VARIATION.LOWER, 2*S);
	bezierVertex(1.5*S, 2*S, S+VARIATION.UPPER, 0, 0, 0);
	endShape();
	
	beginShape();
	vertex(0, 0);
	bezierVertex(-2*S-VARIATION.UPPER, 0, -S, 2*S, -3*S-VARIATION.LOWER, 2*S);
	bezierVertex(-1.5*S, 2*S, -S-VARIATION.UPPER, 0, 0, 0);
	endShape();
	
	triangle(-0.25*S, 0, 0.25*S, 0, 0, 1.5*S);
	line(0, 0, 0, 2*S);

	pop();
}

function stem(c, dx, dy) {
	const N_POINTS = dx.length;
	const NOISE = {DISPLACEMENT: 0.5, FACTOR:0.1};
	const Y_LINE = {A: 1, B: 1};
